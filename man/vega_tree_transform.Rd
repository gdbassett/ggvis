% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vega_refs_transform_tree.R
\name{vega_tree_transform}
\alias{vega_tree_transform}
\title{create a vega tree transform object}
\usage{
vega_tree_transform(type, field = NULL, sort = NULL, method = NULL,
  size = NULL, nodeSize = NULL, as = NULL)
}
\arguments{
\item{type}{All transforms require a type property, specifying the name of the transform.}

\item{field}{Field The data field corresponding to a numeric value for the node. The sum of values for a node and all its descendants is available on the node object as the `value` property.}

\item{sort}{Compare A comparator for sorting sibling nodes. The inputs to the comparator are tree node objects, not input data objects.}

\item{method}{String The layout method to use. One of `tidy` (the default) or `cluster`.}

\item{size}{Number[] The size of the layout, provided as a [width, height] array.}

\item{nodeSize}{Number[] The size of each node, provided as a [width, height] array.}

\item{as}{String[] The output fields at which to write the layout results. The default is `["x", "y", "depth", "children"]`, where `x` and `y` are the layout coordinates, `depth` is the tree depth, and `children` is the count of a node's children in the tree.}
}
\value{
a transform object
}
\description{
https://vega.github.io/vega/docs/transforms/tree/index.html
NOTE: Some parameters are required to be 'arrays'.  In the case where a parameter must be an array but is a single line, wrap it in 'I()', (asis), to ensure it is properly handled.
}
\details{
The **tree** transform computes a node-link diagram layout for hierarchical data. It supports both _cluster_ layouts (for example to create [dendrograms](http://en.wikipedia.org/wiki/Dendrogram)) and _tidy_ layouts (using the method of [Rheingold & Tilford](http://emr.cs.iit.edu/~reingold/tidier-drawings.pdf), as later corrected by [Buchheim _et al._](http://dirk.jivas.de/papers/buchheim02improving.pdf)). The coordinates `x` and `y` produced by the layout represent an arbitrary coordinate system; for example, you can treat x as an angle and y as a radius to produce a radial layout.

Internally, this transform processes a collection of special tree node objects generated by an upstream [nest](../nest) or [stratify](../stratify) transform. The original input data object can be accessed under the `data` field of these tree node objects. This transform uses the [d3-hierarchy library](https://github.com/d3/d3-hierarchy).
}
