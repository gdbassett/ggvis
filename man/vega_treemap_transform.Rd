% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vega_refs_transform_treemap.R
\name{vega_treemap_transform}
\alias{vega_treemap_transform}
\title{create a vega treemap transform object}
\usage{
vega_treemap_transform(type, field = NULL, sort = NULL, method = NULL,
  padding = NULL, paddingInner = NULL, paddingOuter = NULL,
  paddingTop = NULL, paddingRight = NULL, paddingBottom = NULL,
  paddingLeft = NULL, ratio = NULL, round = NULL, size = NULL,
  as = NULL)
}
\arguments{
\item{type}{All transforms require a type property, specifying the name of the transform.}

\item{field}{Field The data field corresponding to a numeric value for the node. The sum of values for a node and all its descendants is available on the node object as the `value` property. This field determines the size of a node.}

\item{sort}{Compare A comparator for sorting sibling nodes. The inputs to the comparator are tree node objects, not input data objects.}

\item{method}{String The layout method to use. One of `squarify` (the default), `resquarify`, `binary`, `dice`, `slice`, or `slicedice`. The `resquarify` method will preserve relative node positions once an initial layout has been computed, even if node sizes change.}

\item{padding}{Number Sets both the _paddingInner_ and _paddingOuter_ parameters to the same value.}

\item{paddingInner}{Number The padding used to separate a node's adjacent children (default `0`).}

\item{paddingOuter}{Number The padding used to separate the edges of a parent node from its contained children (default `0`). Sets the _paddingTop_, _paddingRight_, _paddingBottom_ and _paddingLeft_ parameters to the same value.}

\item{paddingTop}{Number The padding used to separate the top edge of a node from its children.}

\item{paddingRight}{Number The padding used to separate the right edge of a node from its children.}

\item{paddingBottom}{Number The padding used to separate the bottom edge of a node from its children.}

\item{paddingLeft}{Number The padding used to separate the left edge of a node from its children.}

\item{ratio}{Number The target aspect ratio for the `squarify` or `resquarify` methods. The default is the golden ratio, Ï† = (1 + sqrt(5)) / 2.}

\item{round}{Boolean Indicates if node layout values should be rounded (default `false`).}

\item{size}{Number[] The size of the layout, provided as a [width, height] array.}

\item{as}{String[] The output fields at which to write the layout results. The default is `["x0", "y0", "x1", "y1", "depth", "children"]`, where `x0`, `y0`, `x1` and `y1` are the starting and ending layout coordinates for each segment, `depth` is the tree depth, and `children` is the count of a node's children in the tree.}
}
\value{
a transform object
}
\description{
https://vega.github.io/vega/docs/transforms/treemap/index.html
NOTE: Some parameters are required to be 'arrays'.  In the case where a parameter must be an array but is a single line, wrap it in 'I()', (asis), to ensure it is properly handled.
}
\details{
The **treemap** transform recursively subdivides area into rectangles with areas proportional to each node's associated value.

Internally, this transform processes a collection of special tree node objects generated by an upstream [nest](../nest) or [stratify](../stratify) transform. The original input data object can be accessed under the `data` field of these tree node objects. This transform uses the [d3-hierarchy library](https://github.com/d3/d3-hierarchy).
}
