% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vega_refs_transform_force.R
\name{vega_force_transform}
\alias{vega_force_transform}
\title{create a vega force transform object}
\usage{
vega_force_transform(type, static = NULL, restart = NULL,
  iterations = NULL, alpha = NULL, alphaMin = NULL, alphaTarget = NULL,
  velocityDecay = NULL, forces = NULL, as = NULL)
}
\arguments{
\item{type}{All transforms require a type property, specifying the name of the transform.}

\item{static}{Boolean Indicates if the simulation should be computed in batch to produce a static layout (`true`) or should be animated (`false`). The default is `false`.}

\item{restart}{Boolean Indicates if the simulation should restart when node object fields are modified (default `false`).}

\item{iterations}{Number The number of iterations to run the simulation when in _static_ mode (default `300`).}

\item{alpha}{Number A value representing the current energy level or "temperature" of the simulation. Alpha values lie in the range [0, 1]. Internally, the simulation will decrease the alpha value over time, causing the magnitude of updates to diminish.}

\item{alphaMin}{Number The minimum amount by which to lower the alpha value on each simulation iteration (default `0.001`).}

\item{alphaTarget}{Number The target alpha value to which the simulation coverges (default `0`).}

\item{velocityDecay}{Number The velocity decay factor is akin to atmospheric friction; after the application of any forces during an iteration, each node's velocity is multiplied by _1 - velocityDecay_ (default `0.4`).}

\item{forces}{[Force](#forces) An array of objects defining the forces to include in the simulation. See the [forces reference](#forces) for more.}

\item{as}{String[] The output fields to which node positions and velocities are written. The default is `["x", "y", "vx", "vy"]`.}
}
\value{
a transform object
}
\description{
https://vega.github.io/vega/docs/transforms/force/index.html
}
\details{
The **force** transform computes a force-directed layout. Force-directed layout uses a model in which data objects act as charged particles (or _nodes_), optionally connected by a set of edges (or _links_). A set of forces are used to drive a physics simulation that determines the node positions. This transform uses the [d3-force](https://github.com/d3/d3-force) module.

To fix a node at a given position, you may set two special fields on a node object:

- `fx` - the node's fixed x-position
- `fy` - the node's fixed y-position

The force transform modifies the input node data _only_. It does not modify any properties of  link data. Instead, use a [lookup transform](../lookup) to join the node data with the link data. Then, use a transform such as [linkpath](../linkpath) to layout the links.
}
