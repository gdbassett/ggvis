% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vega_refs_transform_partition.R
\name{vega_partition_transform}
\alias{vega_partition_transform}
\title{create a vega partition transform object}
\usage{
vega_partition_transform(type, field = NULL, sort = NULL, padding = NULL,
  round = NULL, size = NULL, as = NULL)
}
\arguments{
\item{type}{All transforms require a type property, specifying the name of the transform.}

\item{field}{Field The data field corresponding to a numeric value for the node. The sum of values for a node and all its descendants is available on the node object as the `value` property. This field determines the size of a node.}

\item{sort}{Compare A comparator for sorting sibling nodes. The inputs to the comparator are tree node objects, not input data objects.}

\item{padding}{Number The padding to include between adjacent nodes (default `0`).}

\item{round}{Boolean Indicates if node layout values should be rounded (default `false`).}

\item{size}{Number[] The size of the layout, provided as a [width, height] array.}

\item{as}{String[] The output fields at which to write the layout results. The default is `["x0", "y0", "x1", "y1", "depth", "children"]`, where `x0`, `y0`, `x1` and `y1` are the starting and ending layout coordinates for each segment, `depth` is the tree depth, and `children` is the count of a node's children in the tree.}
}
\value{
a transform object
}
\description{
https://vega.github.io/vega/docs/transforms/partition/index.html
NOTE: Some parameters are required to be 'arrays'.  In the case where a parameter must be an array but is a single line, wrap it in 'I()', (asis), to ensure it is properly handled.
}
\details{
The **partition** transform computes the layout for an adjacency diagram: a space-filling variant of a node-link tree diagram. Rather than drawing a link between parent and child in the hierarchy, nodes are drawn as solid areas (either arcs or rectangles), and their placement relative to other nodes reveals their position in the hierarchy. The size of the nodes encodes a quantitative dimension that might be difficult to convey in a node-link diagram.

Internally, this transform processes a collection of special tree node objects generated by an upstream [nest](../nest) or [stratify](../stratify) transform. The original input data object can be accessed under the `data` field of these tree node objects. This transform uses the [d3-hierarchy library](https://github.com/d3/d3-hierarchy).
}
