% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vega_refs_transform_density.R
\name{vega_density_transform}
\alias{vega_density_transform}
\title{create a vega density transform object}
\usage{
vega_density_transform(type, distribution = NULL, extent = NULL,
  method = NULL, steps = NULL, as = NULL)
}
\arguments{
\item{type}{All transforms require a type property, specifying the name of the transform.}

\item{distribution}{Distribution (required) An object describing the distribution type and parameters. See the  [distribution reference](#distributions) for more.}

\item{extent}{Number[] A _[min, max]_ domain from which to sample the distribution. This argument is required in most cases, but can be omitted in the case of distributions (namely, `kde`) that can deduce their own extent.}

\item{method}{String The type of distribution to generate. One of `pdf` (default) or `cdf`.}

\item{steps}{Number The number of uniformly spaced steps to take along the _extent_ domain (default `100`). A total of _steps + 1_ uniformly-spaced samples are drawn from the distribution.}

\item{as}{String[] The output fields for the sample value and associated probability. The default is `["value", "density"]`.}
}
\value{
a transform object
}
\description{
https://vega.github.io/vega/docs/transforms/density/index.html
NOTE: Some parameters are required to be 'arrays'.  In the case where a parameter must be an array but is a single line, wrap it in 'I()', (asis), to ensure it is properly handled.
}
\details{
The **density** transform generates a new data stream of uniformly-spaced samples drawn from a one-dimensional [probability density function (pdf)](https://en.wikipedia.org/wiki/Probability_density_function) or [cumulative distribution function (cdf)](https://en.wikipedia.org/wiki/Cumulative_distribution_function). This transform is useful for representing probability distributions and generating continuous distributions from discrete samples using [kernel density estimation](https://en.wikipedia.org/wiki/Kernel_density_estimation).
}
