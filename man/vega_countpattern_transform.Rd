% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vega_refs_transform_countpattern.R
\name{vega_countpattern_transform}
\alias{vega_countpattern_transform}
\title{create a vega countpattern transform object}
\usage{
vega_countpattern_transform(type, field = NULL, pattern = NULL,
  case = NULL, stopwords = NULL, as = NULL)
}
\arguments{
\item{type}{All transforms require a type property, specifying the name of the transform.}

\item{field}{Field (required) The data field containing the text data.}

\item{pattern}{String A string containing a well-formatted [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), defining a pattern to match in the text. All unique pattern matches will be separately counted. The default value is `[\\w\']+`, which will match sequences containing word characters and apostrophes, but no other characters.}

\item{case}{String A lower- or upper-case transformation to apply prior to pattern matching. One of `lower`, `upper` or `mixed` (the default).}

\item{stopwords}{String A string containing a well-formatted [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), defining a pattern of text to ignore. For example, the value `"(foo|bar|baz)"` will treat the words `"foo"`, `"bar"` and `"baz"` as stopwords that should be ignored. The default value is the empty string (`""`), indicating no stop words.}

\item{as}{String[] The output fields for the text pattern and occurrence count. The default is `["text", "count"]`.}
}
\value{
a transform object
}
\description{
https://vega.github.io/vega/docs/transforms/countpattern/index.html
}
\details{
The **countpattern** transform counts the number of occurrences of a text pattern, as defined by a regular expression. This transform will iterate through each data object and count all unique pattern matches found within the designated text _field_.

Both the _pattern_ and _stopwords_ parameters below are not "raw" regular expression patterns â€“ they are embedded in a string. As a result, take care to make sure you use proper escape characters as needed. For example, to match digits, use `"\\\\d"`, not `"\\d"`.
}
