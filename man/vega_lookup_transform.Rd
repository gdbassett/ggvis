% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vega_refs_transform_lookup.R
\name{vega_lookup_transform}
\alias{vega_lookup_transform}
\title{create a vega lookup transform object}
\usage{
vega_lookup_transform(type, from = NULL, key = NULL, values = NULL,
  fields = NULL, as = NULL, default = NULL)
}
\arguments{
\item{type}{All transforms require a type property, specifying the name of the transform.}

\item{from}{Data (required) The name of the secondary data stream upon which to perform the lookup.}

\item{key}{Field (required) The key field on the secondary stream.}

\item{values}{Field[] The data fields to copy from the secondary stream to the primary stream. If not specified, a reference to the full data record is copied.}

\item{fields}{Field[] (required) The data fields in the primary stream to lookup.}

\item{as}{String[] The output fields at which to write data found in the secondary stream. If not specified and a _values_ parameter is supplied, the names of the fields in the _values_ array will be used. This parameter is required if multiple _fields_ are provided or _values_ is unspecified.}

\item{default}{Any The default value to assign if lookup fails (default `null`).}
}
\value{
a transform object
}
\description{
https://vega.github.io/vega/docs/transforms/lookup/index.html
NOTE: Some parameters are required to be 'arrays'.  In the case where a parameter must be an array but is a single line, wrap it in 'I()', (asis), to ensure it is properly handled.
}
\details{
The **lookup** transform extends a primary data stream by looking up values on a secondary data stream. Lookup accepts one or more key fields from the primary data stream, each of which are then searched for in a single key field of the secondary data stream.

If a match is found, by default the full data object in the secondary stream is added as a property of the data object in the primary stream. However, if the _values_ parameter is supplied, the provided field names will instead be copied from the matched object to the primary object, maintaining a "flat" record structure.
}
